cmake_minimum_required (VERSION 2.8.11)
project (Tkacz)

set (Tkacz_VERSION_MAJOR 0)
set (Tkacz_VERSION_MINOR 1)
set (Tkacz_VERSION_PATCH 0)
set (Tkacz_VERSION_MATURITY "Alpha")
set (Tkacz_VERSION_PREVERSION 1)
set (Tkacz_VERSION_NAME "Avogadro")

set (PROJECT_SOURCE_DIR src)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g -Wextra -std=c++11")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O0 -g -Wall -std=c++11")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O4 -DNDEBUG -Wall -std=c++11")

include_directories (  
"${PROJECT_SOURCE_DIR}" 
"${PROJECT_SOURCE_DIR}/core" 
"${PROJECT_SOURCE_DIR}/core/entities" 
"${PROJECT_SOURCE_DIR}/core/io" 
"${PROJECT_SOURCE_DIR}/core/repositories" 
"${PROJECT_SOURCE_DIR}/core/schemas"
"${PROJECT_SOURCE_DIR}/core/schemas/loader"
"${PROJECT_SOURCE_DIR}/core/taxonomies"
"${PROJECT_SOURCE_DIR}/gui" 
"${PROJECT_SOURCE_DIR}/gui/forms"
"${PROJECT_SOURCE_DIR}/gui/widgets"
"${PROJECT_SOURCE_DIR}/gui/perspectives"
"${PROJECT_BINARY_DIR}"
)
 
configure_file (
  "${PROJECT_SOURCE_DIR}/tzbuild.h.in"
  "${PROJECT_BINARY_DIR}/tzbuild.h"
  )
  
# Core Lib

file(
        GLOB_RECURSE
        LibTkacz_SOURCES
        ${PROJECT_SOURCE_DIR}/core/*.cpp
)

file(
        GLOB_RECURSE
        LibTkacz_INCLUDES
        ${PROJECT_SOURCE_DIR}/core/*.hpp
)

# CLI

file(
        GLOB_RECURSE
        CLI_SOURCES
        ${PROJECT_SOURCE_DIR}/cli/*.cpp
)

file(
        GLOB_RECURSE
        CLI_GGO
        ${PROJECT_SOURCE_DIR}/cli/*.ggo
)

# Qt Interface

file(
		GLOB_RECURSE
        QtGUI_SOURCES
        ${PROJECT_SOURCE_DIR}/gui/*.cpp
)

file(
        GLOB_RECURSE
        QtGUI_FORMS
        *.ui
)

file(
        GLOB_RECURSE
        QtGUI_RESOURCES
        *.qrc
)

file(
        GLOB_RECURSE
        QtGUI_HEADERS_MOC
        ${PROJECT_SOURCE_DIR}/gui/forms/*.hpp
)

###### Modules ######

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/;${CMAKE_MODULE_PATH}")

####################
# Qt               #
####################
find_package(Qt5 COMPONENTS widgets REQUIRED)

QT5_WRAP_UI(QtGUI_FORMS_HEADERS ${QtGUI_FORMS})
QT5_WRAP_CPP(QtGUI_HEADERS_MOC ${QtGUI_HEADERS_MOC})
QT5_ADD_RESOURCES(QtGUI_RESOURCES_RCC ${QtGUI_RESOURCES})

# foreach(_USE_FILE ${Qt5_USE_FILES})
#     include(${_USE_FILE})
# endforeach()

SET(QtGUI_SOURCES ${QtGUI_SOURCES} ${QtGUI_FORMS_HEADERS} ${QtGUI_RESOURCES_RCC} ${QtGUI_HEADERS_MOC})

####################
# Python           #
####################

# @FIXME Remove absolute paths.
set(PYTHON_INCLUDE_DIR "/Library/Frameworks/Python.framework/Versions/3.3/include/python3.3m/")
set(PYTHON_LIBRARY "/Library/Frameworks/Python.framework/Versions/3.3/lib/libpython3.3.dylib")
set(PythonLibs_FIND_VERSION 3)
find_package(PythonLibs REQUIRED)
include_directories(${PYTHON_INCLUDE_DIRS})

#message("-- Python version: ${PYTHONLIBS_VERSION_STRING}")
#message("-- Python library: ${PYTHON_LIBRARIES} (${PYTHONLIBS_VERSION_STRING})")
 
####################
# Boost            #
####################

IF(APPLE) 
	set(Boost_USE_STATIC_LIBS ON) 
ELSE()
    set(Boost_USE_STATIC_LIBS OFF) 
ENDIF()

set(Boost_USE_MULTITHREADED ON)  
set(Boost_USE_STATIC_RUNTIME OFF)

find_package(Boost COMPONENTS system filesystem log python python3 REQUIRED)

include_directories(${Boost_INCLUDE_DIR})
link_directories(${Boost_LIBRARY_DIRS})

####################
# Expat            #
####################

find_package(EXPAT REQUIRED)

####################
# LibGit2          #
####################

find_package(LibGit2 REQUIRED)

include_directories(${LIBGIT2_INCLUDE_DIR})

####################
# Gengetopt        #
####################

find_package(Gengetopt REQUIRED)
WRAP_GGO(${CLI_GGO})
message("Gengetopt: " ${${GGO_SRCS}}) 

####################
# Linker           #
####################

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -dead_strip -order-file")
endif()

####################
# Targets          #
####################

# Library

add_library(LibTkacz ${LibTkacz_SOURCES} ${LibTkacz_INCLUDES})
target_link_libraries(LibTkacz ${PYTHON_LIBRARIES})
target_link_libraries(LibTkacz ${Boost_PYTHON3_LIBRARY} ) 
target_link_libraries(LibTkacz ${Boost_SYSTEM_LIBRARY}  ${Boost_FILESYSTEM_LIBRARY} ${Boost_PYTHON_LIBRARY}) 
target_link_libraries(LibTkacz ${LIBGIT2_LIBRARIES})
target_link_libraries(LibTkacz ${EXPAT_LIBRARY} )

SET_TARGET_PROPERTIES(LibTkacz PROPERTIES OUTPUT_NAME "tkacz")

# CLI Executable

ADD_EXECUTABLE(CLI ${CLI_SOURCES})

SET_TARGET_PROPERTIES(CLI PROPERTIES OUTPUT_NAME "tkacz")
target_link_libraries(CLI LibTkacz)

# Qt Gui executable

IF(APPLE)
	# - Bundle -
    set(CMAKE_INSTALL_PREFIX "." )
    SET(QtGUI_SOURCES ${QtGUI_SOURCES} ${CMAKE_CURRENT_SOURCE_DIR}/icons/Tkacz.icns)
    SET_SOURCE_FILES_PROPERTIES(${CMAKE_CURRENT_SOURCE_DIR}/icons/Tkacz.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    SET(MACOSX_BUNDLE_ICON_FILE Tkacz.icns) 
    
    # copy schemas in bundle
    # @fixme potentially buggyâ€¦
    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/schema/ DESTINATION Tkacz.app/Contents/Resources/schema)
    
    # Link to CoreFoundation
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework CoreFoundation")
	
ADD_EXECUTABLE(QtGUI MACOSX_BUNDLE ${QtGUI_SOURCES}) # This must be invoked last, or else icon/bundle name won't be set correctly
ELSE(APPLE)
	ADD_EXECUTABLE(QtGUI ${QtGUI_SOURCES})
ENDIF(APPLE)

SET_TARGET_PROPERTIES(QtGUI PROPERTIES OUTPUT_NAME "Tkacz")

target_link_libraries(QtGUI LibTkacz)
target_link_libraries(QtGUI Qt5::Gui Qt5::Widgets)

target_link_libraries(QtGUI ${Boost_PYTHON3_LIBRARY} ) 
target_link_libraries(QtGUI ${PYTHON_LIBRARIES})

####################
# Install          #
####################

INSTALL(TARGETS QtGUI 
    BUNDLE DESTINATION . COMPONENT Runtime 
    RUNTIME DESTINATION bin COMPONENT Runtime
    )
    
INSTALL(TARGETS LibTkacz
    ARCHIVE DESTINATION lib COMPONENT Runtime
    )